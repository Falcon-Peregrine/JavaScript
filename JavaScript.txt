knowledge base:


Java is not JavaScript, which is interpreted and oop and front-end language

JavaScript frameworks
	react
	agular
	view JS
Sever-side
	nodeJS
mobile apps
	react native
	native script

Munipulate Database:
	have back-end interact with the database:
	using nodeJS, php, python
	
	send request from front-end:
	using like the fetch api, ajax

	store in the users'browser:
	using like local storage
	
MDN
	Mozilla Developer Network
	best docs for JavaScript



Let the html and css to load first in website building

load JavaScript with script tag in html
choose console in chrome developer tools to run


Syntatic Sugar:
	it is the same things, just looks prettier
	for example, in es6 of javascript, class
	is introduced and look prettier than the prototype function
	before
	


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
DOM
	document object model


// window is the top-level function
console.log(window)
window.alert(1)

// Single element
// const form = document.getElementById('my-form');
// console.log(form);

// console.log(document.querySelector('.container'));
//single element selector, if multiple tag, select the first one
//'.css class', use . to connect to html class
-------------Mutiple------------------------------------------------
// Multiple element
//console.log(document.querySelectorAll('.item'));
// return NodeList, similar to Array
// const items = document.querySelectorAll('.item');
// items.forEach((item) => console.log(item))

// Old-Schooled stuff:
// console.log(document.getElementsByClassName('item'));
// // return HTMLCollection, can not run Array methods
// console.log(document.getElementsByTagName('li'));

------------Munipulate---------------------------------------------
// const ul = document.querySelector('.items');

// // ul.remove();
// // remove the whole ul in web page

// // ul.lastElementChild.remove();
// // the last element is gone

// ul.firstElementChild.textContent = 'Hello';
// // set the first element child text 

// ul.children[1].innerText = 'Brad';
// // ul is a nodelist, set the second element text to 'Brad'

// ul.lastElementChild.innerHTML = '<h1>Hello</h1>'
// // use innerHTML to change the style of the last element of the ul

-----------Style--------EventListener-----------------------------------

const btn = document.querySelector('.btn');

btn.style.background = 'red';
// change the style of the button to red

btn.addEventListener('click', (e) => {
	e.preventDefault()
	console.log(e.target.className);
});
// submit button by default runs very fast, preventDefault
// to change that behavior
// e is event, e.target is the button, e.target.className is btn

btn.addEventListener('mouseout', (e) => {
	e.preventDefault();
	document.querySelector('#my-form').style.background = '#ccc'
	document.querySelector('body').classList.add('bg-dark')
	document.querySelector('.items').lastElementChild
	.innerHTML = '<h1>Hello</h1>'
})
// #my-form is the number of my-form, equals to id, because my-form is id='my-form'
// once clicked, add a class 'bg-dark' from css into the html
// event can be mouseover(hover), mouseout

-----------Grap---User------Input----------------------------------------

const myForm = document.querySelector('#my-form');
const nameInput = document.querySelector('#name');
const emailInput = document.querySelector('#email');
const msg = document.querySelector('.msg');
const userList = document.querySelector('#users');

myForm.addEventListener('submit', onSubmit);
function onSubmit(e) {
	e.preventDefault();
	if(nameInput.value === '' || emailInput.value === ''){
		msg.classList.add('error');
		msg.innerHTML = 'Please enter all fields';
		setTimeout(() => msg.remove(), 3000);
	} else{
		console.log('success');
		const li = document.createElement('li');
		li.appendChild(document.createTextNode(`${
			nameInput.value} : ${emailInput.value}`));

		userList.appendChild(li);
		nameInput.value = '';
		emailInput.value = '';
	}
}

// purpose: add the users to the unordered list(ul) in html
// if:
// since it's form element, event can be submit
// not need to call onSubmit, can be defined outside
// add the error class of css into html
// let the empty msg class have new innerHTML text
// setTimeout function takes no parameter, and remove the whole
// msg for 3000 milsecs

// else:
// create element with li tag from nowhere
// append text node and grap the value of the object
// append the child li to userList


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

alert('Hello World');

console.log('Hello World');
	equals to print()
console.error('This is an error')
console.warn('This is an warning')


var
	is not a global variable


let
	value assignment is not necessary
	let age = 30;
	age = 31;
	without assignment, such as let example, example is undefined


const
	is a constant variable, which can not be reassign
	const must assign a value


Template String

using back-tick (``) instead of single quote('') in python
const hello = `My name is ${name} and I am ${age}`
const hello = 'My name is ' + name + 'and I am '+ age



String:
	str.length
	to print out the the lenght of string

	s.substring(0, 5)
	slicing the string

	s.split(' ')
	split with the delimeter

	s.toUpperCase()

	s.toLowerCase()

Data Type:
	String, Numbers, Boolean, null, undefined, Symbol


Numbers
	There is no float or decimal in JS, just the numbers


typeof
	to get the type of data type


Constructor:
	const numbers = new Array(1,2,3,4,5)

Array:

const fruits = ['apples','oranges','pears', 10, true]
console.log(fruits[1])

array.push(var)
	equals to list.append('mangos'), add the value to the end
array.unshift(var)
	add the value to the beginning
array.pop(var)
	delete the last one

Array.isArray('fruits')
	return a boolean value if it is an array

array.indexOf(var):
	return the index of an value in the array



// Object Literals - Key-value pairs

const person = {
	firstName: 'John',
	lastName: 'Doe',
	age: 30,
	hobbies:['music','movies','sports'],
	address: {
		street: '50 main st',
		city:'Boston',
		state: 'MA'
	}
}
console.log(person.firstName, person.lastName)
console.log(person.address.city)


Pulling vars
const { firstName, lastName, address: { city }} = person
console.log(firstName)
console.log(city)

person.email = 'john@gmail.com'
console.log(person)


Converting JSON

const todos = [
  {
  	id: 1, 
  	text: 'Take out trash',
  	isCompleted: true
  },
  {
  	id: 2, 
  	text: 'Meeting with boss',
  	isCompleted: true
  },
  {
  	id: 3, 
  	text: 'Dentist appt',
  	isCompleted: false
  },
];

console.log(todos[1].text)


const todoJSON = JSON.stringify(todos);
console.log(todoJSON)


For Loop
------------------------------
const todos = [
  {
  	id: 1, 
  	text: 'Take out trash',
  	isCompleted: true
  },
  {
  	id: 2, 
  	text: 'Meeting with boss',
  	isCompleted: true
  },
  {
  	id: 3, 
  	text: 'Dentist appt',
  	isCompleted: false
  },
];
----------------------------

for(let i = 0; i <= 10; i++) {
	console.log(i);
}

for(let t of todos) {
	console.log(t.id)
}
// todos is an array, t is anything


High Order Array Methods





forEach Method
todos.forEach(function(todo) {
	console.log(todo.text);
})

map Method
const todoText = todos.map(function(todo) {
	return todo.text;
});

console.log(todoText);

filter Method
const todoCompleted = todos.filter(function(todo){
	return todo.isCompleted === true;
})

console.log(todoCompleted)




const todoCompleted = todos.filter(function(todo) {
	return todo.isCompleted === true;
}).map(function(todo) {
	return todo.text;
})

console.log(todoCompleted)







While Loop
let i = 0;
while(i < 10) {
	console.log(i)
	i++;
}


------------------------------------------

If Statement
const x = 10
if(x == 10) {
	console.log('x is 10')
}

note: operator == does not match the data type, just match the value
for this example, if x = '10', still works, if === operator is used,
it is not

ElseIF Statement
const x = 20
if(x === 10) {
	console.log('x is 10');
} else if(x > 10) {
	console.log('x is greater than 10')
}else {
	console.log('x is less than 10');
}

-------------------------------------
And Node and Or Node
if(x > 5 || y > 10) {
	console.log('true');
} 

if(x > 6 && y > 10) {
	console.log('false');
} 

-------------------------------------
Ternary Operator

const x = 10;
const color = x > 10 ? 'red' : 'blue'
console.log(color)

if color is more than 10, assign color to red else assign
color to blue, and it returns blue


----------------------------------------------

switch evaluating
const color = 'green'
switch(color) {
	case 'red':
		console.log('color is red')
		break;
	case 'blue':
		console.log('color is blue');
		break;
	default:
		console.log('color is Not red or blue')
		break;
}


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Functions

function addNums(num1, num2){
	console.log(num1+num2)
}
addNums(5,4)
-----------------------------------------------------
default values:
function addNums(num1=1, num2=1){
	console.log(num1+num2)
}
addNums()
--------------------------------------------------
arrow functions
const addNums = (num1 = 1, num2 = 1) => {
	return num1 + num2;
}
console.log(addNums(5,5))

simplified version 1:
const addNums = (num1 = 1, num2 = 1) => console.log( num1 + num2);
addNums(5,5)

simplified version 2:
const addNums = (num1 = 1, num2 = 1) => num1 + num2;
console.log(addNums(5,5))
	note: no need to put return

simplifed version 3:
const addNums = num1 => num1+5;
console.log(addNums(5))

simplified version 4:
todos.forEach(todo) => console.log(todo);
	note: just like for i in todos:print(i)

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Obejct Oriencted Programming

// Constructor function
function Person(firstname, lastname, dob) {
	this.firstName = firstname;
	this.lastName = lastname;
	this.dob = new Date(dob);
	this.getBirthYear = function() {
		return this.dob.getFullYear();
	}
	this.getFullName = function(){
		return `${this.firstName} ${this.lastName}`
	}
}

// Instantiate object
const person1 = new Person('John', 'Doe', '4-3-1980');
const person2 = new Person('Mary', 'Simith', '3-6-1970')

console.log(person1.getBirthYear())
console.log(person2.getFullName())

------------------------------------------------------

// Prototype
	with prototype, no need to write the funcntion inside
	a constructor function. Object has two things: constructor
	and prototype __proto__

function Person(firstname, lastname, dob) {
	this.firstName = firstname;
	this.lastName = lastname;
	this.dob = new Date(dob);
}

Person.prototype.getBirthYear = function() {
	return this.dob.getFullYear()
}

Person.prototype.getFullName = function() {
	return `${this.firstName} ${this.lastName}`
}


const person1 = new Person('John', 'Doe', '4-3-1980');
const person2 = new Person('Mary', 'Simith', '3-6-1970')
console.log(person2.getFullName())
console.log(person1)

-------------------------------------------------------

// Class
class Person {
	constructor(firstname, lastname, dob) {
		this.firstName = firstname;
		this.lastName = lastname;
		this.dob = new Date(dob);
	}
	

	getBirthYear() {
	return this.dob.getFullYear();
	}

	getFullName() {
	return `${this.firstName} ${this.lastName}`
	}
}

const person1 = new Person('John', 'Doe', '4-3-1980');
const person2 = new Person('Mary', 'Simith', '3-6-1970')
console.log(person2.getFullName())
console.log(person1)
















Comments:
One line:
	// comments

Multilines:
	/* multi
	line 
	comment */





